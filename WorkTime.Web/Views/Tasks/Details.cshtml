@model WorkTime.Models.WorkTask
@using WorkTime.Web.Services
@inject UserInformation UserInfo

@{
    ViewData["Title"] = "Details";
}

<h4>Задача: @Model.TaskName</h4>

<div>
    <hr />
    <input type="hidden" asp-for="Id" />
    <dl class="row">
        <dt class="col-sm-2">
            Статус задачи
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TaskStatus.Name)
        </dd>
        <dt class="col-sm-2">
            Проект
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Project.Name)
        </dd>
        <dt class = "col-sm-2">
            Текст задачи
        </dt>
        <dd >
            <textarea readonly rows="7" class="form-control" style="background-color: #fff">@Model.TaskText</textarea>
        </dd>
        <dt class = "col-sm-2">
            Количество часов
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CountOfHours)
        </dd>
        <dt class = "col-sm-2">
            Дата завершения
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DateOfCompletion)
        </dd>
        <dt class = "col-sm-2">
            Выдал задачу
        </dt>
        <dd class = "col-sm-10">
            @UserInfo.GetUserName(Model.Issuer.Id)
        </dd>
        <dt class = "col-sm-2">
            Исполнитель
        </dt>
        <dd class = "col-sm-10">
            @UserInfo.GetUserName(Model.Performer.Id)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Редактировать</a> |
    <a asp-action="Index">Вернуться к списку</a>
</div>
<hr />

<div>
    <h4>Комментарии</h4>
    <hr />
    <div>
        <dl id="taskCommentaries">

        </dl>
    </div>
    <textarea id="comTextSend" rows="2" class="form-control"></textarea><button class="btn btn-primary" onclick="sendComment()">Отправить</button>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
          getComments()  
        })

        function getComments() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetCommentaries", "Tasks")',
                data: {
                    __RequestVerificationToken: gettoken(),
                    id: $("#Id").val()
                },
                success: function (result) {
                    let array = $.parseJSON(result);
                    $("#taskCommentaries").html("");
                    for (let i = 0; i < array.data.length; i++) {
                        $('#taskCommentaries').append('<dt>' + array.data[i].Name + '</dt> <dd>' + array.data[i].Text + '</dd>');
                    }
                }
            })
        }
        
        function sendComment() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("SendCommentary", "Tasks")',
                data: {
                    __RequestVerificationToken: gettoken(),
                    taskId: $("#Id").val(),
                    text: $("#comTextSend").val()
                },
                success: function (result) {
                    $('#taskCommentaries').append('<dt>@UserInfo.GetUserName()</dt> <dd>' + $("#comTextSend").val() + '</dd>');
                    $("#comTextSend").val('');
                }
            });
        }

        function gettoken() {
            let token = '@Html.AntiForgeryToken()';
            token = $(token).val();
            return token;
        }
    </script>

}