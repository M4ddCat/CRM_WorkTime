@model WorkTime.Models.Invoice

@{
    ViewData["Title"] = "Создание счёта";
}

<h1>Создание счёта</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ProjectId" class="control-label">Проект</label>
                <select asp-for="ProjectId" class="form-control" asp-items="ViewBag.ProjectId" onchange="getUsers()">
                    <option value="0">Без проекта</option>
                </select>
            </div>
            <div class="form-group">
                <label asp-for="UserId" class="control-label">Сотрудник</label>
                <select asp-for="UserId" class="form-control" asp-items="ViewBag.UserId" onchange="getAtributes()"></select>
            </div>
            <div class="form-grooup">
                <label>Отобрать задачи в диапазоне дат</label>
                <input onchange="useDates()" type="checkbox" />
            </div>
            <div id="dateInput" class="form-group" hidden>
                <label class="control-label">Период дат для отбора задач</label>
                <table>
                    <tr>
                        <td>
                            C
                        </td>
                        <td>
                            <input type="date" id="dateFrom" class="form-control" />
                        </td>
                        <td>
                            По
                        </td>
                        <td>
                            <input type="date" id="dateTo" class="form-control" />
                        </td>
                    </tr>
                </table>
            </div>
            <div class="form-group">
                <label asp-for="Bonus" class="control-label"></label>
                <input asp-for="Bonus" class="form-control" onchange="refreshValues()" />
                <span asp-validation-for="Bonus" class="text-danger"></span>
            </div>
            <div class="form-group">
                <a href="#" type="button" value="Сформировать" class="btn btn-primary" onclick="getTasks()">Сформировать счёт</a>
            </div>
            <div id="invoiceAttributes" hidden>
                <div class="form-group" id="Tasks">
                    <label class="control-label">Добавить задачу</label>
                    <table>
                        <tr>
                            <td>
                                <select style="width: 250px;" onchange="showHoursTask()" data-val="true" id="TasksSelect" class="form-control">
                                </select>
                            </td>
                            <td>
                                <label id="taskHoursSelect">
                                </label>
                            </td>
                            <td>
                                <a href="#" type="button" class="btn btn-primary" onclick="TaskToTable()">+</a>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="form-group">
                    <table class="table" style="width:300pt">
                        <thead>
                            <tr>
                                <th>
                                    Задача
                                </th>
                                <th>
                                    Количество часов
                                </th>
                                <th>

                                </th>
                            </tr>
                        </thead>
                        <tbody id="CompletedTasks">
                        </tbody>
                    </table>
                </div>
                <div id="sum" class="form-group">
                    <label class="row">Итого:</label>
                    <div class="row">
                        <div class="col-lg-4">
                            <label>Время</label>
                            <h5 id="timeCount"></h5>
                        </div>
                        <div class="col-lg-4">
                            <label>Ставка</label>
                            <h5 id="hourlyWage"></h5>
                        </div>
                        <div class="col-lg-4">
                            <label>К оплате:</label>
                            <h5 id="sumCount"></h5>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <a id="createBtn" value="Создать" class="btn btn-primary" onclick="createInvoice()">Создать</a>
                </div>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#ProjectId").select2();
            $("#UserId").select2();
        });

        let hours = 0, wage = 0, tasksArray = [], bonus = 0;

        getUsers();

        function useDates() {
            const inputBlock = document.getElementById('dateInput')

            disableCreate();

            $("#dateFrom").val('');
            $("#dateTo").val('');

            if (inputBlock.hidden){
                inputBlock.hidden = false;
                $(inputBlock).slideDown(200);
            } else {
                $(inputBlock).slideUp(200, function () {
                    inputBlock.hidden = true;
                });
            }
        }

        function disableCreate() {
            document.getElementById('invoiceAttributes').hidden = true;
        }

        function getUsers() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetUsersInProject", "GetValue")',
                data: {
                    __RequestVerificationToken: gettoken(),
                    ProjectId: getProjectId(),
                },
                success: function (result) {
                    let array = $.parseJSON(result);
                    $("#Bonus").val(array.bonus);
                    $("#UserId").html('');
                    for (let i = 0; i < array.data.length; i++) {
                        $('#UserId').append('<option value="' + array.data[i].UserId + '">' + array.data[i].Surname + ' ' + array.data[i].Name + '</option>');
                    }
                    disableCreate();
                    clearTasks();
                    getAtributes();
                }
            });
        }

        function getAtributes() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetUserAtributes", "GetValue")',
                data: {
                    __RequestVerificationToken: gettoken(),
                    ProjectId: getProjectId(),
                    UserId: getUserId()
                },
                success: function (result) {
                    let value = $.parseJSON(result);
                    disableCreate();
                    $("#hourlyWage").html(value.HourlyWage);
                    wage = Number(value.HourlyWage);
                    if (getProjectId() != -0) {
                        $("#Bonus").val(value.Bonus);
                    }
                }
            });
        }

        function getTasks() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetUserTasks", "GetValue")',
                data: {
                    __RequestVerificationToken: gettoken(),
                    ProjectId: getProjectId(),
                    UserId: getUserId(),
                    dateFrom: getDateFrom(), 
                    dateTo: getDateTo()
                },
                success: function (result) {
                    let array = $.parseJSON(result);
                    hours = 0;
                    clearTasks();
                    for (let i = 0; i < array.data.length; i++) {
                        if (array.data[i].TaskStatusId == 1 || array.data[i].TaskStatusId == 2) {
                            $("#TasksSelect").append("<option value='" + array.data[i].CountOfHours + "," + array.data[i].Id + "'>"
                                + array.data[i].TaskName + "</option>");
                        }
                        else {
                            $("#CompletedTasks").append("<tr><td>" + array.data[i].TaskName + "</td><td>" + array.data[i].CountOfHours + "</td><td></td></tr>");
                            hours += array.data[i].CountOfHours;
                            tasksArray.push(array.data[i].Id)
                        }
                    }

                    document.getElementById('invoiceAttributes').hidden = false;
                    showHoursTask();
                    refreshValues();
                }
            });
        }

        function createInvoice() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("Create", "Invoices")',
                data: {
                    __RequestVerificationToken: gettoken(),
                    projectId: getProjectId(),
                    userId: getUserId(),
                    tasksId: tasksArray,
                    bonus: bonus,
                    hourlyWage: wage
                },
                success: function (result) {
                    location.href = "/Invoices/";
                }
            });
        }

        function TaskToTable() {
            let hourTask = $("#TasksSelect option:selected").val().split(',')
            if (hourTask) {
                $("#CompletedTasks").append("<tr><td>" + $("#TasksSelect option:selected").text()
                    + "</td><td>" + hourTask[0] + "</td><td></td></tr>");
                $("#TasksSelect option:selected").remove();
                tasksArray.push(hourTask[1])
                hours += parseInt(hourTask[0]);
                refreshValues();
            }
        }

        function getProjectId() {
            if ($("#ProjectId").val()) {
                return $("#ProjectId").val();
            } else {
                return -0;
            }
        }

        function getDateFrom() {
            if ($("#dateFrom").val()) {
                return $("#dateFrom").val();
            } else {
                return null;
            }
        }

        function getDateTo() {
            if ($("#dateTo").val()) {
                return $("#dateTo").val();
            } else {
                return null
            }
        }

        function clearTasks() {
            $("#TasksSelect").html("");
            $("#CompletedTasks").html("");
            $("#taskHoursSelect").html("");
        }

        function showHoursTask() {
            let hourTask = $("#TasksSelect option:selected").val().split(',');
            $('#taskHoursSelect').html(hourTask[0] + 'ч');
        }

        function refreshValues() {
            bonus = $("#Bonus").val();
            $("#timeCount").html(hours);
            $("#sumCount").html(Number(hours) * Number(wage) + Number(bonus))
        }

        function getUserId() {
            return $("#UserId").val();
        }

        function gettoken() {
            let token = '@Html.AntiForgeryToken()';
            token = $(token).val();
            return token;
        }
    </script>
}
